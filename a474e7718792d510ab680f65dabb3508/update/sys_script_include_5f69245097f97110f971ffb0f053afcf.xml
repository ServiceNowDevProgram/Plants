<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_plants_db.Weather</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>An controller for sending request &amp; handling response for weather APIs.</description>
        <name>Weather</name>
        <script><![CDATA[var Weather = Class.create();
Weather.prototype = {
	query: '', //query to search city
	language: 'en-IN', //default language
	locationType: 'locale', //default location type
	units: 'm', //setting weather units
	
    initialize: function(query) {
		this.query = query; //setting query initialy on creating object
    },
	
	cities: function() {
		//initialize object for getting cities
		var requestBody = [
			{
				"name": "getSunV3LocationSearchUrlConfig",
				"params": {
					"query": this.query,
					"language": this.language,
					"locationType": this.locationType
				}
			}
		];
		
		//prepairing request
		var req = new sn_ws.RESTMessageV2("Weather","Default GET");
		req.setRequestBody(JSON.stringify(requestBody)); //appending body
		
		//getting response
		var response = req.execute();
		var body = JSON.parse(response.getBody());
		var result = body['dal']['getSunV3LocationSearchUrlConfig']['language:' + this.language + ';locationType:'+ this.locationType +';query:' + this.query];
		
		//logging status
		gs.info(result.statusText);
		
		if(result.status != 200){
			gs.info(result.data.text);
			//return empty on invalid status
			return [];
		}
		
		//getting location object
		var location = result['data']['location'];
		
		var cities = [];
		Object.keys(location).map(function(key){
			location[key].map(function(value, index){
				if(cities[index]){
					cities[index][key] = value;
				}else{
					cities[index] = {};
					cities[index][key] = value;
				}
			});
		});
		
		return cities;
	},
	
	//getting weather using latitude & longitude
	get: function(latitude, longitude) {
		var location = null;
		if(!(latitude && longitude)){
			//logging status
			gs.info('getting location according to query...');
			
			//fetching cities
			var cities = this.cities();
			if(cities.length == 0){
				gs.info('no cities found...');
				return null;
			}
			
			//updating latitude & longitude
			location = cities[0];
			latitude = location.latitude;
			longitude = location.longitude;
		}
		
		var geocode = latitude + "," + longitude;
		
		//initialize object for getting cities
		var requestBody = [
			{
				"name": "getSunV3CurrentObservationsUrlConfig",
				"params": {
					"geocode": geocode,
					"units": this.units,
					"language": this.language
				}
			}
		];
		
		//prepairing request
		var req = new sn_ws.RESTMessageV2("Weather","Default GET");
		req.setRequestBody(JSON.stringify(requestBody)); //appending body
		
		//getting response
		var response = req.execute();
		var body = JSON.parse(response.getBody());
		var result = body['dal']['getSunV3CurrentObservationsUrlConfig']['geocode:' + geocode + ';language:'+ this.language +';units:' + this.units];
		
		//logging status
		gs.info(result.statusText);
		
		if(result.status != 200){
			gs.info(result.data.text);
			//return empty on invalid status
			return [];
		}
		
		var data = result['data'];
		data['location'] = location;
		
		return data;
	},

    type: 'Weather'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-10-06 05:55:32</sys_created_on>
        <sys_id>5f69245097f97110f971ffb0f053afcf</sys_id>
        <sys_mod_count>22</sys_mod_count>
        <sys_name>Weather</sys_name>
        <sys_package display_value="My Plants" source="x_snc_plants_db">a474e7718792d510ab680f65dabb3508</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="My Plants">a474e7718792d510ab680f65dabb3508</sys_scope>
        <sys_update_name>sys_script_include_5f69245097f97110f971ffb0f053afcf</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-10-06 07:12:41</sys_updated_on>
    </sys_script_include>
</record_update>
